{"version":3,"sources":["utils/WindDirection.js","components/HourlyForecast.js","components/DailyForecast.js","components/Alerts.js","components/Weather.js","App.js","index.js"],"names":["windDirection","direction","South","SouthWest","West","NorthWest","North","NorthEast","East","SouthEast","HourlyForecast","forecast","tab","index","hour","Date","getHours","TableContainer","hidden","Table","TableHead","TableRow","TableCell","TableBody","slice","map","row","i","src","weather","icon","alt","description","Math","round","temp","wind_deg","wind_speed","toFixed","rain","uvi","DailyForecast","addDays","date","days","newDate","setDate","getDate","dateFormat","month","day","options","rowStyle","fontSize","Intl","DateTimeFormat","format","Alerts","alerts","currentAlerts","filter","a","start","dt","Weather","useState","setTab","name","sys","country","style","display","main","feels_like","wind","deg","speed","hourly","AppBar","position","background","Tabs","value","onChange","event","newValue","Tab","label","daily","App","city","setCity","newCity","setNewCity","currentWeather","setCurrentWeather","setForecast","errorMessage","setErrorMessage","getWeather","cityName","axios","get","process","data","setTimeout","useEffect","coords","coord","lat","lon","then","response","Box","className","minHeight","Alert","severity","onSubmit","preventDefault","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f83210ff.chunk.js","sourcesContent":["import React from 'react'\nimport { North, NorthEast, East, SouthEast, South, SouthWest, West, NorthWest } from '@material-ui/icons'\n\nconst windDirection = (direction) => {\n  if(direction <= 22.5 || direction > 337.5){\n    return <South />\n  } else if(direction <= 67.5){\n    return <SouthWest />\n  } else if(direction <= 112.5){\n    return <West />\n  } else if(direction <= 157.5){\n    return <NorthWest />\n  } else if(direction <= 202.5){\n    return <North />\n  } else if(direction <= 247.5){\n    return <NorthEast />\n  } else if(direction <= 292.5){\n    return <East />\n  } else {\n    return <SouthEast />\n  }\n}\n\nexport default windDirection","import React from 'react'\nimport  PropTypes  from 'prop-types'\nimport { TableContainer, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core'\n\nimport windDirection from '../utils/WindDirection'\n\n// Daily forecast for the next 24 hours\nconst HourlyForecast = ({ forecast, tab, index }) => {\n  const hour = new Date().getHours() + 1\n\n  return (\n    <TableContainer hidden={tab !== index}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell>Temperature</TableCell>\n            <TableCell>Wind</TableCell>\n            <TableCell>Rain</TableCell>\n            <TableCell>UV Index</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {forecast.slice(1,24).map((row, i) => (\n            <TableRow key={i}>\n              <TableCell>{`${(hour+i) % 24}:00`}</TableCell>\n              <TableCell>\n                <img\n                  src={`https://openweathermap.org/img/wn/${row.weather[0].icon}@2x.png`}\n                  alt={row.weather[0].description}\n                />\n              </TableCell>\n              <TableCell>{Math.round(row.temp)} â„ƒ</TableCell>\n              <TableCell>{windDirection(row.wind_deg)} {row.wind_speed.toFixed(1)} m/s</TableCell>\n              <TableCell>{row.rain ? row.rain['1h'] : 0 } mm</TableCell>\n              <TableCell>{row.uvi.toFixed(1)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default HourlyForecast\n\nHourlyForecast.propTypes = {\n  forecast: PropTypes.array,\n  tab: PropTypes.number,\n  index: PropTypes.number\n}","import React from 'react'\nimport  PropTypes  from 'prop-types'\nimport { TableContainer, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core'\n\nimport windDirection from '../utils/WindDirection'\n\n// Daily forecast for the next seven days\nconst DailyForecast = ({ forecast, tab, index }) => {\n  // Adds given amount of days to the date\n  const addDays = (date, days) => {\n    const newDate = new Date()\n    newDate.setDate(date.getDate() + days)\n    return newDate\n  }\n\n  const date = new Date()\n  const dateFormat = { month:'numeric', day:'numeric' }\n\n  return (\n    <TableContainer hidden={tab !== index}>\n      <Table options={{\n        rowStyle: {\n          fontSize: 24,\n        }\n      }}>\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell>Temperature</TableCell>\n            <TableCell>Wind</TableCell>\n            <TableCell>Rain</TableCell>\n            <TableCell>UV Index</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {forecast.map((row, i) => (\n            <TableRow key={i}>\n              <TableCell>{new Intl.DateTimeFormat('fi-FI', dateFormat).format(addDays(date, i+1))}</TableCell>\n              <TableCell>\n                <img\n                  src={`https://openweathermap.org/img/wn/${row.weather[0].icon}@2x.png`}\n                  alt={row.weather[0].description}\n                />\n              </TableCell>\n              <TableCell>{Math.round(row.temp.day)} â„ƒ</TableCell>\n              <TableCell>{windDirection(row.wind_deg)} {row.wind_speed.toFixed(1)} m/s</TableCell>\n              <TableCell>{row.rain ? row.rain : 0 } mm</TableCell>\n              <TableCell>{row.uvi.toFixed(1)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default DailyForecast\n\nDailyForecast.propTypes = {\n  forecast: PropTypes.array,\n  tab: PropTypes.number,\n  index: PropTypes.number\n}","import React from 'react'\nimport  PropTypes  from 'prop-types'\nimport { TableContainer, Table, TableRow, TableCell, TableBody } from '@material-ui/core'\n\n// Displays todays weather alerts\nconst Alerts = ({ weather, alerts, tab, index }) =>{\n  if(!alerts){\n    return null\n  }\n\n  const currentAlerts = alerts.filter(a => a.start < weather.dt)\n\n  return (\n    <TableContainer hidden={tab !== index} >\n      <Table>\n        <TableBody>\n          {currentAlerts.map((a, i) => (\n            <TableRow key={i}>\n              <TableCell>{a.description}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default Alerts\n\nAlerts.propTypes = {\n  weather: PropTypes.object,\n  alerts: PropTypes.array,\n  tab: PropTypes.number,\n  index: PropTypes.number\n}\n","import React, { useState } from 'react'\nimport  PropTypes  from 'prop-types'\nimport { AppBar, Tabs, Tab } from '@material-ui/core'\n\nimport HourlyForecast from './HourlyForecast'\nimport DailyForecast from './DailyForecast'\nimport Alerts from './Alerts'\nimport windDirection from '../utils/WindDirection'\n\nconst Weather = ({ weather, forecast }) => {\n  const [tab, setTab] = useState(0)\n\n  if(!weather || !forecast){\n    return null\n  }\n\n  const handleTabChange = (event, newValue) => {\n    setTab(newValue)\n  }\n\n  return (\n    <div>\n      <h1>{weather.name}, {weather.sys.country}</h1>\n      <div>\n        <img\n          src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n          alt={weather.weather[0].description}\n        />\n        <h2 style={{ display: 'block' }}>{weather.weather[0].description}</h2>\n      </div>\n      <div>\n        <h2>Temperature: {Math.round(weather.main.temp)}â„ƒ</h2>\n        <h2>Feels like: {Math.round(weather.main.feels_like)}â„ƒ</h2>\n      </div>\n      <h2>Wind: {windDirection(weather.wind.deg)} {weather.wind.speed.toFixed(1)} m/s</h2>\n      <h2>Rain: {forecast.hourly[0].rain ? forecast.hourly[0].rain['1h'] : 0} mm</h2>\n      <h2>UV Index: {forecast.hourly[0].uvi}</h2>\n      <AppBar position=\"static\" style={{ background: '#2196f3' }}>\n        <Tabs value={tab} onChange={handleTabChange}>\n          <Tab label='Hourly'/>\n          <Tab label='Daily'/>\n          <Tab label='Alerts'/>\n        </Tabs>\n        <HourlyForecast forecast={forecast.hourly} tab={tab} index={0}/>\n        <DailyForecast forecast={forecast.daily} tab={tab} index={1}/>\n        <Alerts weather={weather} alerts={forecast.alerts} tab={tab} index={2}></Alerts>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default Weather\n\nWeather.propTypes = {\n  weather: PropTypes.object,\n  forecast: PropTypes.object\n}\n","import './App.css'\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Alert from '@material-ui/lab/Alert'\nimport { Box } from '@material-ui/core'\n\nimport Weather from './components/Weather'\n\nfunction App() {\n  const [city, setCity] = useState('Helsinki')\n  const [newCity, setNewCity] = useState('')\n  const [currentWeather, setCurrentWeather] = useState(null)\n  const [forecast, setForecast] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // Gets the current weather from OpenWeater's Current Weather API. If the request fails error message is shown.\n  const getWeather = async (cityName) => {\n    try {\n      const weather = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n      )\n      setCurrentWeather(weather.data)\n      setCity(cityName)\n    } catch (error) {\n      setErrorMessage(`Could not find ${cityName}`)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 3000)\n    }\n  }\n\n  useEffect(() => {\n    getWeather(city)\n  }, [])\n\n  // Gets the weather forecast and alerts from OpenWeater's One Call API.\n  useEffect(() => {\n    if(currentWeather){\n      // We get coordinates of the location from the previous request.\n      const coords = currentWeather.coord\n      axios\n        .get(\n          `https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&exclude=current,minutely&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n        )\n        .then(response => setForecast(response.data))\n    }\n  }, [currentWeather])\n\n  const handleSubmit =  (event) => {\n    event.preventDefault()\n    getWeather(newCity)\n    setNewCity('')\n  }\n\n  const handleCityChange = (event) => {\n    setNewCity(event.target.value)\n  }\n\n  return (\n    <Box className=\"App\" style={{ background: '#2196f3', minHeight: '100vh' }}>\n      { errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n      <form onSubmit={handleSubmit}>\n        <input\n          value={newCity}\n          onChange={handleCityChange}\n        ></input>\n        <button type=\"submit\">Search</button>\n      </form>\n      <Weather weather={currentWeather} forecast={forecast}/>\n    </Box>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}